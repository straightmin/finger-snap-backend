generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// 사용자
model User {
  id              Int            @id @default(autoincrement()) @map("id")
  email           String         @unique @map("email")
  passwordHash    String         @map("password_hash")
  username        String         @map("username")
  bio             String?        @map("bio")
  profileImageUrl String?        @map("profile_image_url")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  deletedAt       DateTime?      @map("deleted_at")
  collections     Collection[]
  comments        Comment[]
  photoLikes      PhotoLike[]
  commentLikes    CommentLike[]
  notifications   Notification[]
  photos          Photo[]
  series          Series[]

  @@map("users")
}

/// 사진(게시물)
model Photo {
  id            Int               @id @default(autoincrement()) @map("id")
  userId        Int               @map("user_id")
  title         String            @default("Untitled") @map("title")
  description   String?           @map("description")
  imageUrl      String            @map("image_url")
  thumbnailUrl  String            @map("thumbnail_url")
  viewCount     Int               @default(0) @map("view_count")
  isPublic      Boolean           @default(true) @map("is_public")
  createdAt     DateTime          @default(now()) @map("created_at")
  updatedAt     DateTime          @updatedAt @map("updated_at")
  deletedAt     DateTime?         @map("deleted_at")
  inCollections CollectionPhoto[]
  comments      Comment[]
  likes         PhotoLike[]
  author        User              @relation(fields: [userId], references: [id])
  series        Series[]          @relation("SeriesCover")
  inSeries      SeriesPhoto[]     @relation("SeriesToPhoto")

  @@index([userId])
  @@map("photos")
}

/// 댓글
model Comment {
  id        Int       @id @default(autoincrement()) @map("id")
  photoId   Int       @map("photo_id")
  userId    Int       @map("user_id")
  content   String    @map("content")
  parentId  Int?      @map("parent_id")
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @updatedAt @map("updated_at")
  deletedAt DateTime? @map("deleted_at")
  likes     CommentLike[]
  photo     Photo     @relation(fields: [photoId], references: [id])
  author    User      @relation(fields: [userId], references: [id])

  @@index([photoId])
  @@index([userId])
  @@map("comments")
}

/// 사진 좋아요
model PhotoLike {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("user_id")
  photoId   Int      @map("photo_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  photo     Photo    @relation(fields: [photoId], references: [id], onDelete: Cascade)

  @@unique([userId, photoId])
  @@index([userId])
  @@index([photoId])
  @@map("photo_likes")
}

/// 댓글 좋아요
model CommentLike {
  id        Int      @id @default(autoincrement()) @map("id")
  userId    Int      @map("user_id")
  commentId Int      @map("comment_id")
  createdAt DateTime @default(now()) @map("created_at")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment   Comment  @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId])
  @@index([userId])
  @@index([commentId])
  @@map("comment_likes")
}

/// 컬렉션(북마크 모음)
model Collection {
  id          Int               @id @default(autoincrement()) @map("id")
  userId      Int               @map("user_id")
  title       String            @map("title")
  description String?           @map("description")
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")
  photos      CollectionPhoto[]
  owner       User              @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("collections")
}

/// 컬렉션에 포함된 사진 (N:N)
model CollectionPhoto {
  id           Int        @id @default(autoincrement()) @map("id")
  collectionId Int        @map("collection_id")
  photoId      Int        @map("photo_id")
  createdAt    DateTime   @default(now()) @map("created_at")
  collection   Collection @relation(fields: [collectionId], references: [id])
  photo        Photo      @relation(fields: [photoId], references: [id])

  @@unique([collectionId, photoId])
  @@map("collection_photos")
}

/// 알림
model Notification {
  id           Int     @id @default(autoincrement()) @map("id")
  userId       Int     @map("user_id")
  content      String  @map("content")
  isRead       Boolean @default(false) @map("is_read")
  resourceId   Int?    @map("resource_id")
  resourceType String? @map("resource_type")
  createdAt    DateTime @default(now()) @map("created_at")
  receiver     User    @relation(fields: [userId], references: [id])

  @@index([userId])
  @@map("notifications")
}

/// 사진 시리즈(전시)
model Series {
  id           Int           @id @default(autoincrement()) @map("id")
  userId       Int           @map("user_id")
  title        String        @map("title")
  description  String?       @map("description")
  coverPhotoId Int?          @map("cover_photo_id")
  isPublic     Boolean       @default(true) @map("is_public")
  createdAt    DateTime      @default(now()) @map("created_at")
  updatedAt    DateTime      @updatedAt @map("updated_at")
  coverPhoto   Photo?        @relation("SeriesCover", fields: [coverPhotoId], references: [id])
  author       User          @relation(fields: [userId], references: [id])
  photos       SeriesPhoto[] @relation("SeriesToPhoto")

  @@index([userId])
  @@map("series")
}

/// 시리즈-사진 연결 (N:N + 순서 필드)
model SeriesPhoto {
  id        Int      @id @default(autoincrement())
  seriesId  Int
  photoId   Int
  position  Int      @default(0)
  createdAt DateTime @default(now())
  photo     Photo    @relation("SeriesToPhoto", fields: [photoId], references: [id])
  series    Series   @relation("SeriesToPhoto", fields: [seriesId], references: [id])

  @@unique([seriesId, photoId])
  @@index([seriesId, position])
  @@map("series_photos")
}